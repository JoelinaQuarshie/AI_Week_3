{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "409b63cf-dc60-4111-87b5-c1fa1e9c4e53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "MNIST HANDWRITTEN DIGITS CLASSIFICATION PROJECT\n",
      "Using Convolutional Neural Network (CNN)\n",
      "======================================================================\n",
      "======================================================================\n",
      "STEP 1: LOADING AND PREPROCESSING MNIST DATASET\n",
      "======================================================================\n",
      "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
      "\u001b[1m11490434/11490434\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 0us/step\n",
      "\n",
      "✓ Dataset loaded successfully!\n",
      "  - Training samples: 60000\n",
      "  - Testing samples: 10000\n",
      "  - Image shape: (28, 28) (28x28 pixels)\n",
      "  - Number of classes: 10 (digits 0-9)\n",
      "\n",
      "✓ Data reshaped:\n",
      "  - Training shape: (60000, 28, 28, 1)\n",
      "  - Testing shape: (10000, 28, 28, 1)\n",
      "\n",
      "✓ Pixel values normalized to [0, 1] range\n",
      "  - Min value: 0.00\n",
      "  - Max value: 1.00\n",
      "\n",
      "✓ Labels one-hot encoded\n",
      "  - Original label shape: (60000,)\n",
      "  - Encoded label shape: (60000, 10)\n",
      "\n",
      "✓ Displaying 10 sample images...\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x200 with 10 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "STEP 2: BUILDING CNN ARCHITECTURE\n",
      "======================================================================\n",
      "\n",
      "✓ CNN Model Architecture:\n",
      "----------------------------------------------------------------------\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">28</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ pool1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ pool2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)            │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv3 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │        <span style=\"color: #00af00; text-decoration-color: #00af00\">36,928</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │           <span style=\"color: #00af00; text-decoration-color: #00af00\">256</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3136</span>)           │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │       <span style=\"color: #00af00; text-decoration-color: #00af00\">401,536</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_3           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │           <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
       "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ output (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">10</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">1,290</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv1 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m28\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m128\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ pool1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_1           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ pool2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)            │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv3 (\u001b[38;5;33mConv2D\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │        \u001b[38;5;34m36,928\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_2           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │           \u001b[38;5;34m256\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3136\u001b[0m)           │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense1 (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │       \u001b[38;5;34m401,536\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ batch_normalization_3           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │           \u001b[38;5;34m512\u001b[0m │\n",
       "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)            │                        │               │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_2 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ output (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m10\u001b[0m)             │         \u001b[38;5;34m1,290\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">459,722</span> (1.75 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m459,722\u001b[0m (1.75 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">459,146</span> (1.75 MB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m459,146\u001b[0m (1.75 MB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">576</span> (2.25 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m576\u001b[0m (2.25 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------\n",
      "\n",
      "✓ Total Parameters: 459,722\n",
      "\n",
      "======================================================================\n",
      "STEP 3: TRAINING THE MODEL\n",
      "======================================================================\n",
      "\n",
      "✓ Training Configuration:\n",
      "  - Epochs: 10\n",
      "  - Batch size: 128\n",
      "  - Optimizer: Adam\n",
      "  - Loss function: Categorical Crossentropy\n",
      "\n",
      "✓ Callbacks configured:\n",
      "  - Early Stopping (patience=3)\n",
      "  - Learning Rate Reduction (factor=0.5, patience=2)\n",
      "\n",
      "🚀 Starting training...\n",
      "----------------------------------------------------------------------\n",
      "Epoch 1/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m51s\u001b[0m 95ms/step - accuracy: 0.9379 - loss: 0.2032 - val_accuracy: 0.9014 - val_loss: 0.2991 - learning_rate: 0.0010\n",
      "Epoch 2/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 90ms/step - accuracy: 0.9781 - loss: 0.0719 - val_accuracy: 0.9876 - val_loss: 0.0359 - learning_rate: 0.0010\n",
      "Epoch 3/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 89ms/step - accuracy: 0.9846 - loss: 0.0514 - val_accuracy: 0.9907 - val_loss: 0.0283 - learning_rate: 0.0010\n",
      "Epoch 4/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 94ms/step - accuracy: 0.9861 - loss: 0.0451 - val_accuracy: 0.9904 - val_loss: 0.0270 - learning_rate: 0.0010\n",
      "Epoch 5/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 87ms/step - accuracy: 0.9883 - loss: 0.0376 - val_accuracy: 0.9918 - val_loss: 0.0231 - learning_rate: 0.0010\n",
      "Epoch 6/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 92ms/step - accuracy: 0.9901 - loss: 0.0322 - val_accuracy: 0.9901 - val_loss: 0.0263 - learning_rate: 0.0010\n",
      "Epoch 7/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 87ms/step - accuracy: 0.9913 - loss: 0.0287\n",
      "Epoch 7: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m42s\u001b[0m 90ms/step - accuracy: 0.9907 - loss: 0.0302 - val_accuracy: 0.9927 - val_loss: 0.0232 - learning_rate: 0.0010\n",
      "Epoch 8/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 88ms/step - accuracy: 0.9929 - loss: 0.0223 - val_accuracy: 0.9944 - val_loss: 0.0181 - learning_rate: 5.0000e-04\n",
      "Epoch 9/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 94ms/step - accuracy: 0.9941 - loss: 0.0191 - val_accuracy: 0.9942 - val_loss: 0.0172 - learning_rate: 5.0000e-04\n",
      "Epoch 10/10\n",
      "\u001b[1m469/469\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 93ms/step - accuracy: 0.9941 - loss: 0.0180 - val_accuracy: 0.9940 - val_loss: 0.0222 - learning_rate: 5.0000e-04\n",
      "Restoring model weights from the end of the best epoch: 9.\n",
      "----------------------------------------------------------------------\n",
      "✓ Training completed!\n",
      "\n",
      "======================================================================\n",
      "STEP 4: MODEL EVALUATION\n",
      "======================================================================\n",
      "\n",
      "📊 TEST SET PERFORMANCE:\n",
      "  - Test Loss: 0.0172\n",
      "  - Test Accuracy: 0.9942 (99.42%)\n",
      "\n",
      "✅ Goal achieved! Accuracy > 95%\n",
      "\n",
      "📋 DETAILED CLASSIFICATION REPORT:\n",
      "----------------------------------------------------------------------\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00       980\n",
      "           1       1.00      1.00      1.00      1135\n",
      "           2       0.99      1.00      1.00      1032\n",
      "           3       1.00      1.00      1.00      1010\n",
      "           4       1.00      0.99      0.99       982\n",
      "           5       0.99      0.99      0.99       892\n",
      "           6       0.99      1.00      0.99       958\n",
      "           7       1.00      0.99      0.99      1028\n",
      "           8       0.99      0.99      0.99       974\n",
      "           9       0.99      0.99      0.99      1009\n",
      "\n",
      "    accuracy                           0.99     10000\n",
      "   macro avg       0.99      0.99      0.99     10000\n",
      "weighted avg       0.99      0.99      0.99     10000\n",
      "\n",
      "\n",
      "======================================================================\n",
      "STEP 5: VISUALIZING PREDICTIONS\n",
      "======================================================================\n",
      "\n",
      "✓ Displaying predictions on 5 random test images:\n",
      "----------------------------------------------------------------------\n",
      "  Image 6252: True=6, Predicted=6, Confidence=100.00% ✓\n",
      "  Image 4684: True=2, Predicted=2, Confidence=100.00% ✓\n",
      "  Image 1731: True=3, Predicted=3, Confidence=100.00% ✓\n",
      "  Image 4742: True=7, Predicted=7, Confidence=100.00% ✓\n",
      "  Image 4521: True=2, Predicted=2, Confidence=100.00% ✓\n"
     ]
    },
    {
     "data": {
      "image/png": "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27R48eJ8vZ4AAMBGvNx8BgAAPir3yrq5c+daw4YNc369ZMkSq2zZspYkq06dOpZlWS7b51zN+fjjj7usxsu54m7JkiUu+40bN86yLMv69ddfXR5/9tlnnfscO3bMKl269CVXNc6ZM8f5eFBQkJWcnOzMzp4967IiOOdKzPxY+duuXTtr/Pjx1ssvv2zdfffdLqtXixUrZu3bt++S+9WsWdM6duyYy9hZWVlWqVKlnNu8+OKLLvnw4cNd9r+gQ4cOzsejoqKsw4cPO7MXXnjBuJLStPL3jz/+cHm8a9eu1rlz51zmsn37dpev3a3qvdw2OVeYR0REWKmpqc5s6tSpLnP59NNPLzleeHi4tX//fmdWv359Z9ajRw/n47fddpvz8c8///yiOe7fv986derUJeef06xZs1zmNWnSJGd25MgRlxWebdu2dWY5V/5KsiZOnOjM3nzzTZfs+PHjl51Hbu5W/nbv3t2ZdejQwcrOznZm8+bNc2YOh8Pas2ePZVmW9dhjjzkff+mlly46XlpampWWlub8OvfzfOHChVc0/ytZ+Ttw4EBnlvO1kXuuPXv2dD7eoEGDi4556tQp6+eff7bef/9964033rDGjx/v8pysVq2ac9vp06e7HOfdd991ZklJSS4rgnPWlAkTJris8M25uvrIkSMuvyHx2WefWZZlWd98843L9yu3M2fOWHv37r2i6wsAAIoG7vkLAADy7OGHH3be2/euu+7SwYMHJZ1f9etOzhVwN910k2rXru38umXLli73Br2w7erVq13GuOeee5yfR0ZGXnRf3Aty3ls1IyPD5V6wwcHBzhXBueeVH3766Sf94x//0PDhwzV9+nRlZ2dLkvz9/fXvf//b+MfeHn74YUVGRro8lpiYqMOHDzu/fuaZZ1zucfryyy87s6SkJOf9SHNet44dO6pkyZLOr++9994rPqfc96odNWqUAgJcf3msWrVqVzyuSc7vSadOnVS6dGnn13fffbcCAwMvuW1O3bp1c1llXatWLefnF1YkS+efexc88MADat26tR588EG98cYbWrlypcqWLavQ0NArmrPkep2LFy+ubt26XXbO/v7+GjBggPPruLg4lzznvPNDzu/r/Pnz5efn53xudezY0ZlZluVc0Zvzej377LNq3ry5+vfvr1deeUWLFi1SZGSkSpQoka/zzKuc9SE2NtYl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",
      "text/plain": [
       "<Figure size 1500x300 with 5 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "----------------------------------------------------------------------\n",
      "\n",
      "✓ Plotting training history...\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "✓ Plotting confusion matrix...\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`. \n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "======================================================================\n",
      "STEP 6: SAVING MODEL\n",
      "======================================================================\n",
      "\n",
      "✓ Model saved to: models/mnist_model.h5\n",
      "\n",
      "======================================================================\n",
      "✅ MNIST CLASSIFICATION PROJECT COMPLETED SUCCESSFULLY!\n",
      "======================================================================\n",
      "\n",
      "📊 FINAL SUMMARY:\n",
      "  - Test Accuracy: 99.42%\n",
      "  - Goal (>95%): ✓ ACHIEVED\n"
     ]
    }
   ],
   "source": [
    "\"\"\"\n",
    "Task 2: Deep Learning with TensorFlow - MNIST Handwritten Digits Classification\n",
    "Author: ML Project\n",
    "Date: 2025\n",
    "\n",
    "This script builds a CNN model to classify MNIST handwritten digits.\n",
    "Goal: Achieve >95% test accuracy\n",
    "Steps:\n",
    "1. Load and preprocess MNIST dataset\n",
    "2. Build CNN architecture\n",
    "3. Train the model\n",
    "4. Evaluate and visualize predictions\n",
    "\"\"\"\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from tensorflow.keras import layers, models\n",
    "from tensorflow.keras.datasets import mnist\n",
    "from tensorflow.keras.utils import to_categorical\n",
    "from sklearn.metrics import confusion_matrix, classification_report\n",
    "import seaborn as sns\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# Set random seeds for reproducibility\n",
    "np.random.seed(42)\n",
    "tf.random.set_seed(42)\n",
    "\n",
    "class MNISTClassifier:\n",
    "    \"\"\"\n",
    "    CNN-based classifier for MNIST handwritten digits\n",
    "    \"\"\"\n",
    "    \n",
    "    def __init__(self):\n",
    "        self.model = None\n",
    "        self.history = None\n",
    "        \n",
    "    def load_and_preprocess_data(self):\n",
    "        \"\"\"\n",
    "        Load MNIST dataset and preprocess it\n",
    "        Returns: X_train, X_test, y_train, y_test\n",
    "        \"\"\"\n",
    "        print(\"=\" * 70)\n",
    "        print(\"STEP 1: LOADING AND PREPROCESSING MNIST DATASET\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        # Load MNIST dataset\n",
    "        (X_train, y_train), (X_test, y_test) = mnist.load_data()\n",
    "        \n",
    "        print(f\"\\n✓ Dataset loaded successfully!\")\n",
    "        print(f\"  - Training samples: {X_train.shape[0]}\")\n",
    "        print(f\"  - Testing samples: {X_test.shape[0]}\")\n",
    "        print(f\"  - Image shape: {X_train.shape[1:]} (28x28 pixels)\")\n",
    "        print(f\"  - Number of classes: {len(np.unique(y_train))} (digits 0-9)\")\n",
    "        \n",
    "        # Reshape data to add channel dimension (required for CNN)\n",
    "        # From (samples, 28, 28) to (samples, 28, 28, 1)\n",
    "        X_train = X_train.reshape(-1, 28, 28, 1)\n",
    "        X_test = X_test.reshape(-1, 28, 28, 1)\n",
    "        \n",
    "        print(f\"\\n✓ Data reshaped:\")\n",
    "        print(f\"  - Training shape: {X_train.shape}\")\n",
    "        print(f\"  - Testing shape: {X_test.shape}\")\n",
    "        \n",
    "        # Normalize pixel values from [0, 255] to [0, 1]\n",
    "        X_train = X_train.astype('float32') / 255.0\n",
    "        X_test = X_test.astype('float32') / 255.0\n",
    "        \n",
    "        print(f\"\\n✓ Pixel values normalized to [0, 1] range\")\n",
    "        print(f\"  - Min value: {X_train.min():.2f}\")\n",
    "        print(f\"  - Max value: {X_train.max():.2f}\")\n",
    "        \n",
    "        # One-hot encode labels\n",
    "        # From [3] to [0, 0, 0, 1, 0, 0, 0, 0, 0, 0]\n",
    "        y_train_encoded = to_categorical(y_train, 10)\n",
    "        y_test_encoded = to_categorical(y_test, 10)\n",
    "        \n",
    "        print(f\"\\n✓ Labels one-hot encoded\")\n",
    "        print(f\"  - Original label shape: {y_train.shape}\")\n",
    "        print(f\"  - Encoded label shape: {y_train_encoded.shape}\")\n",
    "        \n",
    "        # Display sample images\n",
    "        self.visualize_samples(X_train, y_train)\n",
    "        \n",
    "        return X_train, X_test, y_train, y_test, y_train_encoded, y_test_encoded\n",
    "    \n",
    "    def visualize_samples(self, X, y, num_samples=10):\n",
    "        \"\"\"\n",
    "        Visualize sample images from the dataset\n",
    "        \"\"\"\n",
    "        print(f\"\\n✓ Displaying {num_samples} sample images...\")\n",
    "        \n",
    "        plt.figure(figsize=(15, 2))\n",
    "        for i in range(num_samples):\n",
    "            plt.subplot(1, num_samples, i + 1)\n",
    "            plt.imshow(X[i].reshape(28, 28), cmap='gray')\n",
    "            plt.title(f'Label: {y[i]}', fontsize=10)\n",
    "            plt.axis('off')\n",
    "        \n",
    "        plt.suptitle('Sample MNIST Images', fontsize=14, fontweight='bold')\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('mnist_samples.png', dpi=150, bbox_inches='tight')\n",
    "        plt.show()\n",
    "    \n",
    "    def build_cnn_model(self):\n",
    "        \"\"\"\n",
    "        Build CNN architecture for MNIST classification\n",
    "        \n",
    "        Architecture:\n",
    "        - Conv2D (32 filters, 3x3) + ReLU + MaxPooling\n",
    "        - Conv2D (64 filters, 3x3) + ReLU + MaxPooling\n",
    "        - Conv2D (64 filters, 3x3) + ReLU\n",
    "        - Flatten\n",
    "        - Dense (64) + ReLU + Dropout\n",
    "        - Dense (10) + Softmax\n",
    "        \"\"\"\n",
    "        print(\"\\n\" + \"=\" * 70)\n",
    "        print(\"STEP 2: BUILDING CNN ARCHITECTURE\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        model = models.Sequential([\n",
    "            # First Convolutional Block\n",
    "            layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1), \n",
    "                         padding='same', name='conv1'),\n",
    "            layers.BatchNormalization(),\n",
    "            layers.MaxPooling2D((2, 2), name='pool1'),\n",
    "            layers.Dropout(0.25),\n",
    "            \n",
    "            # Second Convolutional Block\n",
    "            layers.Conv2D(64, (3, 3), activation='relu', padding='same', name='conv2'),\n",
    "            layers.BatchNormalization(),\n",
    "            layers.MaxPooling2D((2, 2), name='pool2'),\n",
    "            layers.Dropout(0.25),\n",
    "            \n",
    "            # Third Convolutional Block\n",
    "            layers.Conv2D(64, (3, 3), activation='relu', padding='same', name='conv3'),\n",
    "            layers.BatchNormalization(),\n",
    "            \n",
    "            # Flatten and Dense Layers\n",
    "            layers.Flatten(name='flatten'),\n",
    "            layers.Dense(128, activation='relu', name='dense1'),\n",
    "            layers.BatchNormalization(),\n",
    "            layers.Dropout(0.5),\n",
    "            layers.Dense(10, activation='softmax', name='output')\n",
    "        ])\n",
    "        \n",
    "        # Compile model\n",
    "        model.compile(\n",
    "            optimizer='adam',\n",
    "            loss='categorical_crossentropy',\n",
    "            metrics=['accuracy']\n",
    "        )\n",
    "        \n",
    "        self.model = model\n",
    "        \n",
    "        print(\"\\n✓ CNN Model Architecture:\")\n",
    "        print(\"-\" * 70)\n",
    "        model.summary()\n",
    "        print(\"-\" * 70)\n",
    "        \n",
    "        # Calculate total parameters\n",
    "        total_params = model.count_params()\n",
    "        print(f\"\\n✓ Total Parameters: {total_params:,}\")\n",
    "        \n",
    "        return model\n",
    "    \n",
    "    def train_model(self, X_train, y_train, X_test, y_test, epochs=10, batch_size=128):\n",
    "        \"\"\"\n",
    "        Train the CNN model\n",
    "        \"\"\"\n",
    "        print(\"\\n\" + \"=\" * 70)\n",
    "        print(\"STEP 3: TRAINING THE MODEL\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        print(f\"\\n✓ Training Configuration:\")\n",
    "        print(f\"  - Epochs: {epochs}\")\n",
    "        print(f\"  - Batch size: {batch_size}\")\n",
    "        print(f\"  - Optimizer: Adam\")\n",
    "        print(f\"  - Loss function: Categorical Crossentropy\")\n",
    "        \n",
    "        # Callbacks\n",
    "        early_stopping = keras.callbacks.EarlyStopping(\n",
    "            monitor='val_loss',\n",
    "            patience=3,\n",
    "            restore_best_weights=True,\n",
    "            verbose=1\n",
    "        )\n",
    "        \n",
    "        reduce_lr = keras.callbacks.ReduceLROnPlateau(\n",
    "            monitor='val_loss',\n",
    "            factor=0.5,\n",
    "            patience=2,\n",
    "            min_lr=1e-6,\n",
    "            verbose=1\n",
    "        )\n",
    "        \n",
    "        print(f\"\\n✓ Callbacks configured:\")\n",
    "        print(f\"  - Early Stopping (patience=3)\")\n",
    "        print(f\"  - Learning Rate Reduction (factor=0.5, patience=2)\")\n",
    "        \n",
    "        print(f\"\\n🚀 Starting training...\")\n",
    "        print(\"-\" * 70)\n",
    "        \n",
    "        # Train the model\n",
    "        self.history = self.model.fit(\n",
    "            X_train, y_train,\n",
    "            batch_size=batch_size,\n",
    "            epochs=epochs,\n",
    "            validation_data=(X_test, y_test),\n",
    "            callbacks=[early_stopping, reduce_lr],\n",
    "            verbose=1\n",
    "        )\n",
    "        \n",
    "        print(\"-\" * 70)\n",
    "        print(\"✓ Training completed!\")\n",
    "        \n",
    "        return self.history\n",
    "    \n",
    "    def evaluate_model(self, X_test, y_test, y_test_encoded):\n",
    "        \"\"\"\n",
    "        Evaluate the model on test set\n",
    "        \"\"\"\n",
    "        print(\"\\n\" + \"=\" * 70)\n",
    "        print(\"STEP 4: MODEL EVALUATION\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        # Evaluate on test set\n",
    "        test_loss, test_accuracy = self.model.evaluate(X_test, y_test_encoded, verbose=0)\n",
    "        \n",
    "        print(f\"\\n📊 TEST SET PERFORMANCE:\")\n",
    "        print(f\"  - Test Loss: {test_loss:.4f}\")\n",
    "        print(f\"  - Test Accuracy: {test_accuracy:.4f} ({test_accuracy*100:.2f}%)\")\n",
    "        \n",
    "        if test_accuracy > 0.95:\n",
    "            print(f\"\\n✅ Goal achieved! Accuracy > 95%\")\n",
    "        else:\n",
    "            print(f\"\\n⚠ Goal not met. Target: 95%, Current: {test_accuracy*100:.2f}%\")\n",
    "        \n",
    "        # Predictions\n",
    "        y_pred_probs = self.model.predict(X_test, verbose=0)\n",
    "        y_pred = np.argmax(y_pred_probs, axis=1)\n",
    "        \n",
    "        # Classification report\n",
    "        print(f\"\\n📋 DETAILED CLASSIFICATION REPORT:\")\n",
    "        print(\"-\" * 70)\n",
    "        print(classification_report(y_test, y_pred, \n",
    "                                   target_names=[str(i) for i in range(10)]))\n",
    "        \n",
    "        # Confusion matrix\n",
    "        cm = confusion_matrix(y_test, y_pred)\n",
    "        \n",
    "        return {\n",
    "            'test_loss': test_loss,\n",
    "            'test_accuracy': test_accuracy,\n",
    "            'y_pred': y_pred,\n",
    "            'y_pred_probs': y_pred_probs,\n",
    "            'confusion_matrix': cm\n",
    "        }\n",
    "    \n",
    "    def visualize_predictions(self, X_test, y_test, results, num_samples=5):\n",
    "        \"\"\"\n",
    "        Visualize model predictions on sample images\n",
    "        \"\"\"\n",
    "        print(\"\\n\" + \"=\" * 70)\n",
    "        print(\"STEP 5: VISUALIZING PREDICTIONS\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        y_pred = results['y_pred']\n",
    "        y_pred_probs = results['y_pred_probs']\n",
    "        \n",
    "        # Select random samples\n",
    "        indices = np.random.choice(len(X_test), num_samples, replace=False)\n",
    "        \n",
    "        fig, axes = plt.subplots(1, num_samples, figsize=(15, 3))\n",
    "        \n",
    "        print(f\"\\n✓ Displaying predictions on {num_samples} random test images:\")\n",
    "        print(\"-\" * 70)\n",
    "        \n",
    "        for idx, ax in zip(indices, axes):\n",
    "            # Display image\n",
    "            ax.imshow(X_test[idx].reshape(28, 28), cmap='gray')\n",
    "            \n",
    "            # Get prediction and confidence\n",
    "            pred_label = y_pred[idx]\n",
    "            true_label = y_test[idx]\n",
    "            confidence = y_pred_probs[idx][pred_label] * 100\n",
    "            \n",
    "            # Set title color based on correctness\n",
    "            color = 'green' if pred_label == true_label else 'red'\n",
    "            \n",
    "            ax.set_title(f'True: {true_label}\\nPred: {pred_label}\\nConf: {confidence:.1f}%',\n",
    "                        color=color, fontsize=10, fontweight='bold')\n",
    "            ax.axis('off')\n",
    "            \n",
    "            print(f\"  Image {idx}: True={true_label}, Predicted={pred_label}, \"\n",
    "                  f\"Confidence={confidence:.2f}% {'✓' if pred_label == true_label else '✗'}\")\n",
    "        \n",
    "        plt.suptitle('Model Predictions on Test Images', fontsize=14, fontweight='bold')\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('mnist_predictions.png', dpi=150, bbox_inches='tight')\n",
    "        plt.show()\n",
    "        \n",
    "        print(\"-\" * 70)\n",
    "    \n",
    "    def plot_training_history(self):\n",
    "        \"\"\"\n",
    "        Plot training and validation accuracy/loss\n",
    "        \"\"\"\n",
    "        print(\"\\n✓ Plotting training history...\")\n",
    "        \n",
    "        fig, axes = plt.subplots(1, 2, figsize=(15, 5))\n",
    "        \n",
    "        # Plot accuracy\n",
    "        axes[0].plot(self.history.history['accuracy'], label='Training Accuracy', linewidth=2)\n",
    "        axes[0].plot(self.history.history['val_accuracy'], label='Validation Accuracy', linewidth=2)\n",
    "        axes[0].set_title('Model Accuracy', fontsize=14, fontweight='bold')\n",
    "        axes[0].set_xlabel('Epoch')\n",
    "        axes[0].set_ylabel('Accuracy')\n",
    "        axes[0].legend()\n",
    "        axes[0].grid(True, alpha=0.3)\n",
    "        \n",
    "        # Plot loss\n",
    "        axes[1].plot(self.history.history['loss'], label='Training Loss', linewidth=2)\n",
    "        axes[1].plot(self.history.history['val_loss'], label='Validation Loss', linewidth=2)\n",
    "        axes[1].set_title('Model Loss', fontsize=14, fontweight='bold')\n",
    "        axes[1].set_xlabel('Epoch')\n",
    "        axes[1].set_ylabel('Loss')\n",
    "        axes[1].legend()\n",
    "        axes[1].grid(True, alpha=0.3)\n",
    "        \n",
    "        plt.tight_layout()\n",
    "        plt.savefig('mnist_training_history.png', dpi=150, bbox_inches='tight')\n",
    "        plt.show()\n",
    "    \n",
    "    def plot_confusion_matrix(self, results):\n",
    "        \"\"\"\n",
    "        Plot confusion matrix\n",
    "        \"\"\"\n",
    "        print(\"\\n✓ Plotting confusion matrix...\")\n",
    "        \n",
    "        cm = results['confusion_matrix']\n",
    "        \n",
    "        plt.figure(figsize=(10, 8))\n",
    "        \n",
    "        try:\n",
    "            import seaborn as sns\n",
    "            sns.heatmap(cm, annot=True, fmt='d', cmap='Blues',\n",
    "                       xticklabels=range(10),\n",
    "                       yticklabels=range(10),\n",
    "                       cbar_kws={'label': 'Count'})\n",
    "        except ImportError:\n",
    "            # Fallback to matplotlib\n",
    "            plt.imshow(cm, cmap='Blues', interpolation='nearest')\n",
    "            plt.colorbar(label='Count')\n",
    "            \n",
    "            # Add text annotations\n",
    "            for i in range(10):\n",
    "                for j in range(10):\n",
    "                    plt.text(j, i, str(cm[i, j]),\n",
    "                           ha='center', va='center',\n",
    "                           color='white' if cm[i, j] > cm.max()/2 else 'black')\n",
    "            \n",
    "            plt.xticks(range(10))\n",
    "            plt.yticks(range(10))\n",
    "        \n",
    "        plt.title('Confusion Matrix - MNIST Classification', fontsize=14, fontweight='bold')\n",
    "        plt.xlabel('Predicted Label')\n",
    "        plt.ylabel('True Label')\n",
    "        plt.tight_layout()\n",
    "        plt.savefig('mnist_confusion_matrix.png', dpi=150, bbox_inches='tight')\n",
    "        plt.show()\n",
    "    \n",
    "    def save_model(self, filepath='models/'):\n",
    "        \"\"\"\n",
    "        Save trained model\n",
    "        \"\"\"\n",
    "        print(\"\\n\" + \"=\" * 70)\n",
    "        print(\"STEP 6: SAVING MODEL\")\n",
    "        print(\"=\" * 70)\n",
    "        \n",
    "        import os\n",
    "        os.makedirs(filepath, exist_ok=True)\n",
    "        \n",
    "        model_path = os.path.join(filepath, 'mnist_model.h5')\n",
    "        self.model.save(model_path)\n",
    "        \n",
    "        print(f\"\\n✓ Model saved to: {model_path}\")\n",
    "\n",
    "\n",
    "def main():\n",
    "    \"\"\"\n",
    "    Main execution function\n",
    "    \"\"\"\n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"MNIST HANDWRITTEN DIGITS CLASSIFICATION PROJECT\")\n",
    "    print(\"Using Convolutional Neural Network (CNN)\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Initialize classifier\n",
    "    classifier = MNISTClassifier()\n",
    "    \n",
    "    # Load and preprocess data\n",
    "    X_train, X_test, y_train, y_test, y_train_encoded, y_test_encoded = \\\n",
    "        classifier.load_and_preprocess_data()\n",
    "    \n",
    "    # Build CNN model\n",
    "    classifier.build_cnn_model()\n",
    "    \n",
    "    # Train model (use fewer epochs for faster testing, increase for better accuracy)\n",
    "    classifier.train_model(X_train, y_train_encoded, X_test, y_test_encoded, \n",
    "                          epochs=10, batch_size=128)\n",
    "    \n",
    "    # Evaluate model\n",
    "    results = classifier.evaluate_model(X_test, y_test, y_test_encoded)\n",
    "    \n",
    "    # Visualize predictions on 5 sample images\n",
    "    classifier.visualize_predictions(X_test, y_test, results, num_samples=5)\n",
    "    \n",
    "    # Plot training history\n",
    "    classifier.plot_training_history()\n",
    "    \n",
    "    # Plot confusion matrix\n",
    "    classifier.plot_confusion_matrix(results)\n",
    "    \n",
    "    # Save model\n",
    "    classifier.save_model()\n",
    "    \n",
    "    print(\"\\n\" + \"=\" * 70)\n",
    "    print(\"✅ MNIST CLASSIFICATION PROJECT COMPLETED SUCCESSFULLY!\")\n",
    "    print(\"=\" * 70)\n",
    "    \n",
    "    # Final summary\n",
    "    print(\"\\n📊 FINAL SUMMARY:\")\n",
    "    print(f\"  - Test Accuracy: {results['test_accuracy']*100:.2f}%\")\n",
    "    print(f\"  - Goal (>95%): {'✓ ACHIEVED' if results['test_accuracy'] > 0.95 else '✗ NOT MET'}\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ac7d88c-c76b-4fc9-995e-3e6f58bae750",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b8a7a161-fff0-4442-9701-d9141a39cc4e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
